// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("PRISMA_DATABASE_URL")
}

// Define enum types
enum Provider {
  FACEBOOK
  GOOGLE
  // Add other providers here as needed
}

enum Role {
  ADMIN
  USER
}

enum CronStatus {
  SUCCESS
  FAILURE
  IN_PROGRESS
}

enum ReactionType {
  THUMBS_UP
  THINKING
  SURPRISED
  CRYING
  STARRY_EYES
  MINDBLOWN
  EYES
  ROCKET
  HEART
  PRAY
  PARTY
  // Add other reactions here as needed
}

enum Channel {
  EMAIL
  SLACK
  // Add other channels here as needed
}

enum SubscriptionType {
  WEEKLY_DIGEST
  // Add other subscription types here as needed
}

model User {
  id                  String   @id @default(uuid()) @db.VarChar(64) // Primary key, UUID type
  provider            Provider // Enum type
  providerId          String   @db.VarChar(128)
  email               String   @unique @db.VarChar(128)
  handle              String   @unique @db.VarChar(32)
  displayName         String   @db.VarChar(32)
  inviteCode          String?  @db.VarChar(64)
  photoUrl            String   @db.VarChar(256)
  affiliation         String?  @db.VarChar(64)
  bio                 String?  @db.VarChar(200)
  url                 String?  @db.VarChar(512)
  googleScholarLink   String?  @db.VarChar(512)
  semanticScholarLink String?  @db.VarChar(512)
  openReviewUserName  String?  @db.VarChar(64)
  lastLoginAt         DateTime
  role                Role     @default(USER) // Enum type
  isActivated         Boolean  @default(true)
  slackEmail          String?  @db.VarChar(128)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @default(now()) @updatedAt

  followedBy      FollowingRecord[] @relation("FollowedBy")
  following       FollowingRecord[] @relation("Following")
  recommendations Recommendation[]
  inviteCodeOwner InviteCode[]      @relation("InviteCodeOwner")
  inviteCodeUsed  InviteCode?       @relation("InviteCodeUsedBy")
  announcements   Announcement[]
  recReactions    RecReaction[]
  subscriptions   Subscription[]

  @@unique([provider, providerId])
}

model FollowingRecord {
  followingId  String   @db.VarChar(64)
  followedById String   @db.VarChar(64)
  createdAt    DateTime @default(now())
  following    User     @relation("FollowedBy", fields: [followingId], references: [id])
  followedBy   User     @relation("Following", fields: [followedById], references: [id])

  @@id([followingId, followedById])
}

model Recommendation {
  id          String   @id @default(uuid()) @db.VarChar(64)
  userId      String   @db.VarChar(64)
  articleId   String   @db.VarChar(64)
  description String
  isSelfRec   Boolean  @default(false)
  cutoff      DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt

  user      User          @relation(fields: [userId], references: [id]) // User who made the recommendation
  article   Article       @relation(fields: [articleId], references: [id]) // Article being recommended
  reactions RecReaction[]
}

model Article {
  id         String   @id @default(uuid()) @db.VarChar(64)
  doi        String?  @db.VarChar(32)
  title      String   @db.VarChar(256)
  author     String
  link       String   @db.VarChar(256)
  year       Int      @db.SmallInt
  month      Int?     @db.SmallInt
  isVerified Boolean  @default(false)
  abstract   String?  @db.Text
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  recommendations Recommendation[]
}

model DigitalLibrary {
  id         Int      @id @default(autoincrement())
  name       String   @unique @db.VarChar(64)
  regex      String[]
  isVerified Boolean
  rank       Int      @unique
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt
}

model InviteCode {
  id       Int       @id @default(autoincrement())
  code     String    @unique @db.VarChar(64)
  ownerId  String    @db.VarChar(64)
  issuedAt DateTime  @default(now())
  usedById String?   @unique @db.VarChar(64)
  usedAt   DateTime?

  owner  User  @relation("InviteCodeOwner", fields: [ownerId], references: [id])
  usedBy User? @relation("InviteCodeUsedBy", fields: [usedById], references: [id])
}

model Announcement {
  id          Int      @id @default(autoincrement())
  title       String   @db.VarChar(128)
  content     String
  startAt     DateTime
  endAt       DateTime
  isActivated Boolean  @default(true)
  allowClose  Boolean  @default(false)
  createdById String   @db.VarChar(64)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt

  createdBy User @relation(fields: [createdById], references: [id])
}

model RecReaction {
  id        Int          @id @default(autoincrement())
  userId    String       @db.VarChar(64)
  recId     String       @db.VarChar(64)
  reaction  ReactionType
  createdAt DateTime     @default(now())

  user           User           @relation(fields: [userId], references: [id])
  recommendation Recommendation @relation(fields: [recId], references: [id])

  @@unique([userId, recId, reaction])
}

model Subscription {
  id        Int              @id @default(autoincrement())
  userId    String           @db.VarChar(64)
  type      SubscriptionType
  channel   Channel
  createdAt DateTime         @default(now())

  user User @relation(fields: [userId], references: [id])

  @@unique([userId, type, channel])
}

model WeeklyDigestCronLog {
  id        Int        @id @default(autoincrement())
  cutoff    DateTime
  startTime DateTime   @default(now())
  endTime   DateTime?
  status    CronStatus
  result    Json?
  errorMsg  String?
  createdAt DateTime   @default(now())
}
