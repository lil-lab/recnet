// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider          = "postgresql"
  url               = env("PRISMA_DATABASE_URL")
}

// Define enum types
enum Provider {
  FACEBOOK
  GOOGLE
  // Add other providers here as needed
}

enum Role {
  ADMIN
  USER
}

enum CronStatus {
  SUCCESS
  FAILURE
  IN_PROGRESS
}

model User {
  id            String     @id @db.VarChar(64) @default(uuid()) // Primary key, UUID type
  provider      Provider   // Enum type
  providerId    String     @db.VarChar(128)
  @@unique([provider, providerId])
  email         String     @db.VarChar(128) @unique
  handle        String     @db.VarChar(32) @unique
  displayName   String     @db.VarChar(32)
  inviteCode    String?    @db.VarChar(64)
  photoUrl      String     @db.VarChar(256)
  affiliation   String?    @db.VarChar(64)
  bio           String?    @db.VarChar(200)
  lastLoginAt   DateTime
  role          Role       @default(USER) // Enum type
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @default(now()) @updatedAt

  followedBy      FollowingRecord[] @relation("FollowedBy")
  following       FollowingRecord[] @relation("Following")
  recommendations Recommendation[]
  inviteCodeOwner InviteCode[]  @relation("InviteCodeOwner")
  inviteCodeUsed  InviteCode?   @relation("InviteCodeUsedBy")
}

model FollowingRecord {
  followingId     String    @db.VarChar(64)
  followedById    String    @db.VarChar(64)
  createdAt       DateTime  @default(now())

  @@id([followingId, followedById])
  following       User @relation("FollowedBy", fields: [followingId], references: [id])
  followedBy      User @relation("Following", fields: [followedById], references: [id])
}

model Recommendation {
  id          String    @id @db.VarChar(64) @default(uuid())
  userId      String    @db.VarChar(64)
  articleId   String    @db.VarChar(64)
  description String
  cutoff      DateTime
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now()) @updatedAt

  user        User      @relation(fields: [userId], references: [id]) // User who made the recommendation
  article     Article   @relation(fields: [articleId], references: [id]) // Article being recommended
}

model Article {
  id          String    @id @db.VarChar(64) @default(uuid())
  doi         String?   @db.VarChar(32)
  title       String    @db.VarChar(256)
  author      String
  link        String    @db.VarChar(256)
  year        Int       @db.SmallInt
  month       Int?      @db.SmallInt
  isVerified  Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now()) @updatedAt

  recommendations Recommendation[]
}

model InviteCode {
  id          Int       @id @default(autoincrement())
  code        String    @db.VarChar(64) @unique
  ownerId     String    @db.VarChar(64)
  issuedAt    DateTime  @default(now())
  usedById    String?   @db.VarChar(64) @unique
  usedAt      DateTime?

  owner       User      @relation("InviteCodeOwner", fields: [ownerId], references: [id])
  usedBy      User?     @relation("InviteCodeUsedBy", fields: [usedById], references: [id])
}

model WeeklyDigestCronLog {
  id          Int       @id @default(autoincrement())
  cutoff      DateTime
  startTime   DateTime  @default(now())
  endTime     DateTime?
  status      CronStatus
  result      Json?
  errorMsg    String?
  createdAt   DateTime  @default(now())
}
